services:

# Network testing container
  nettools:
    image: nettools
    networks:
      - backend    
    # docker build -t nettools -f nettools.Dockerfile .
  postgres:
    image: postgres:latest
    container_name: target_postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products_db
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d products_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: docker.io/bitnami/kafka:4.0
    ports:
      - "9092"
    networks:
      - backend       
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    # entrypoint: >
    #   /bin/bash -c "
    #     apt-get update && 
    #     apt-get install -y telnet netcat-openbsd lsof net-tools &&
    #     rm -rf /var/lib/apt/lists/* &&
    #     exec /opt/bitnami/scripts/kafka/entrypoint.sh"
    # healthcheck:
    #   test: [ "CMD", "nc", "-z", "localhost", "9092" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - kafka
    networks:
      - backend       
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    # depends_on:
    #   - kafka
  target-service:
    image: paam0101/target-demo:latest
    build:
      context: .
    container_name: target-service
    ports:
      - "8080:8080"
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/products_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      postgres:
        condition: service_healthy
      # kafka:
      #   condition: service_healthy
    restart: on-failure

networks:
  backend:
    name: backend
    external: true
    
volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
